generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                         String         @id @default(uuid())
  username                   String         @unique
  password                   String?
  email_address              String?
  name                       String?
  avatar                     String?
  provider                   String?
  roles                      UserRole[]
  accountStatus              Boolean        @default(false)
  isAdmin                    Boolean        @default(false)
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  refreshTokens              RefreshToken[]
  contests                   ContestSubmission[]
  subscriptions              Subscription[]
}

model SubscriptionPlan {
  id                  String   @id @default(uuid())
  name                String   @unique
  description         String?
  price               Decimal  @db.Decimal(10, 2)    
  features            Json?    @db.Json
  interval            String
  paystack_plan_code  String? @unique
  type                String   @default("paid")
  isActive            Boolean  @default(true)
  isDefault           Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  subscriptions       Subscription[]

  @@index([name])
  @@index([paystack_plan_code])
}

model Subscription {
  id                          String   @id @default(uuid())
  userId                      String
  planId                      String
  paystack_subscription_code  String? @unique
  status                      String   @default("active") 
  startDate                   DateTime @default(now())
  endDate                     DateTime
  plan                        SubscriptionPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  user                        User     @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@index([userId])
  @@index([planId])
}


model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  role   Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

model Product {
  id                 String           @id @default(uuid())
  name               String           @unique
  description        String
  full_description   String           @db.Text
  price              Decimal          @db.Decimal(10, 2)
  stock              Int
  discount_order_qty Int              @default(0)
  discount_percent   Int              @default(0)
  manufacturer       String?
  product_main_image Json             @db.Json
  product_images     Json             @db.Json
  categoryId         String
  category           Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems         OrderItem[]
  tags               ProductTag[]
  product_variants   ProductVariant[]
  averageRating       Float     @default(0)
  reviews             ProductReview[]
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt

  @@index([categoryId])
}

model ProductTag {
  id        String  @id @default(uuid())
  name      String  @unique
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductVariant {
  id                String              @id @default(uuid())
  name              String?
  value             String?
  productId         String
  product           Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems        OrderItem[]
  orderItemVariants OrderItemVariant[]  @relation("ProductVariantToOrderItemVariant")

  @@index([productId])
}

model OrderItemVariant {
  id           String          @id @default(uuid())
  orderItemId  String
  variantId    String
  variant      ProductVariant  @relation("ProductVariantToOrderItemVariant", fields: [variantId], references: [id])

  @@index([orderItemId])
  @@index([variantId])
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  products  Product[]
  createdAt DateTime  @default(now())
}

model Customer {
  id                String     @id @default(uuid())
  name              String?
  email             String     @unique
  phone             String?
  customer_code     String?
  metadata          Json?
  phone_format      String?
  orders            Order[]
  payments          Payment[]
  refunds           Refund[]
  invoices          Invoice[]
  addresses         Address[]
  productReviews    ProductReview[] 
  createdAt         DateTime   @default(now())
}

model Address {
  id                String   @id @default(uuid())
  customerId        String  
  fullName          String
  phone             String
  additional_phone  String?
  delivery_address  String
  additional_info   String?
  city              String
  state             String
  postalCode        String?
  country           String?
  isDefault         Boolean  @default(false)
  type              AddressType @default(CHECKOUT)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  customer          Customer? @relation(fields: [customerId], references: [id])

   @@index([customerId])
}

model Order {
  id                String        @id @default(uuid())
  email             String
  customerId        String?
  order_Id          String        @unique
  user              Customer?     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  amount            Decimal       @db.Decimal(10, 2)
  delivery_fee      Decimal?      @db.Decimal(10, 2)
  paymentReference  String?
  paymentStatus     PaymentStatus @default(PENDING)
  orderStatus       OrderStatus  @default(PENDING)
  deliveryStatus    DeliveryStatus @default(PENDING)
  metadata          Json?
  couponId          String?
  coupon            Coupon?   @relation(fields: [couponId], references: [id], onDelete: SetNull)

  orderItems        OrderItem[]
  payment           Payment?
  invoice           Invoice?
  shippingLogs      ShippingLog[]
  productReviews    ProductReview[]

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  paidAt           DateTime?
  

  @@index([customerId])
  @@index([couponId])
}

model OrderItem {
  id         String   @id @default(uuid())
  title      String?
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  productId  String
  product    Product  @relation(fields: [productId], references: [id])
  variantId  String?  
  variant    ProductVariant? @relation(fields: [variantId], references: [id])
  quantity   Int
  price      Decimal  @db.Decimal(10, 2)

  subtotal   Decimal  @db.Decimal(10, 2)
  discount   Decimal? @db.Decimal(10, 2) 

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
}

model ShippingLog {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  status    String   
  timestamp DateTime @default(now())
  note      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  userId    String?
  currency  String?
  reference String?
  user      Customer?      @relation(fields: [userId], references: [id])
  order     Order?         @relation(fields: [orderId], references: [id])
  amount    Decimal        @db.Decimal(10, 2)
  status    PaymentStatus  @default(PENDING)
  method    PaymentMethod?
  refund    Refund?
  createdAt DateTime       @default(now())

  @@index([userId])
}

model Refund {
  id        String       @id @default(uuid())
  paymentId String       @unique
  userId    String
  payment   Payment      @relation(fields: [paymentId], references: [id])
  user      Customer     @relation(fields: [userId], references: [id])
  amount    Decimal @db.Decimal(10, 2)
  reason    String
  status    RefundStatus @default(PENDING)
  createdAt DateTime     @default(now())

  @@index([userId])
}

model Invoice {
  id       String   @id @default(uuid())
  orderId  String   @unique
  customerEmail String
  order    Order    @relation(fields: [orderId], references: [id])
  userId   String
  customer Customer @relation(fields: [userId], references: [id])
  total    Decimal @db.Decimal(10, 2)
  status   String?
  metadata Json?
  issuedAt DateTime @default(now())

  @@index([userId])
}

model Coupon {
  id        String    @id @default(uuid())
  code      String    @unique
  discount  Decimal   @db.Decimal(5, 2) 
  expiresAt DateTime
  orders    Order[]
  createdAt DateTime  @default(now())
}

model Course {
  id          String          @id @default(uuid())
  userId      String
  title       String          @unique
  description String?         @db.LongText
  price       Float?          @db.Float
  asset       Json?
  isPublished Boolean         @default(false)
  categoryId  String?
  category    CourseCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model CourseCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  courses   Course[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String           @id @default(uuid())
  slug        String
  userId      String
  title       String           @unique
  description String
  categoryId  String?
  mediaType   MediaType
  mediaDoc    Json?
  category    ProjectCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([categoryId])
}

model ProjectCategory {
  id        String    @id @default(uuid())
  title     String    @unique
  projects  Project[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Attachment {
  id        String   @id @default(uuid())
  name      String   @db.Text
  asset     Json?
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Purchase {
  id          String   @id @default(uuid())
  userId      String
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  //user        Customer @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount      Float?    @db.Float
  purchasedAt DateTime @default(now())

  @@unique([userId, courseId])
  @@index([courseId])
}

model Chapter {
  id           String         @id @default(uuid())
  title        String
  description  String?        @db.LongText
  videoUrl     String?        @db.Text
  position     Int
  isFree       Boolean        @default(false)
  isPublished  Boolean        @default(false)
  mediaType    MediaType?
  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  muxData      MuxData?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([courseId])
}

model MuxData {
  id        String   @id @default(uuid())
  assetId   String
  publicId  String
  chapterId String   @unique
  chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model UserProgress {
  id          String   @id @default(uuid())
  userId      String
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Blog {
  id          String        @id @default(uuid())
  title       String        @unique
  content     String?       @db.Text
  images      Json          @db.Json
  isPublished Boolean       @default(false)
  categoryId  String?
  category    BlogCategory? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  author      String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([categoryId])
}

model BlogCategory {
  id        String   @id @default(uuid())
  name      String   @unique
  blogs     Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WebhookLog {
  id         String   @id @default(uuid())
  event      String   
  status     String   
  rawData    Json     
  error      String?  @db.LongText
  createdAt  DateTime @default(now())
}

model Campaign {
  id            String     @id @default(uuid())
  title         String
  description   String
  goalAmount    Int        
  asset         Json?   
  donations     Donation[]
  due_date      DateTime?
  created_by    String
  target        String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Donation {
  id            String     @id @default(uuid())
  campaignId    String
  campaign      Campaign   @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  firstName     String?
  lastName      String?
  phone         String?
  customer_code String?
  email         String
  amount        Int        
  reference     String     @unique
  status        DonationStatus @default(PENDING)
  isAnonymous   Boolean    @default(false)
  paid_At       DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

   @@index([campaignId])
   @@unique([campaignId, id])
}

model Contest{
  id            String     @id @default(uuid())
  title         String
  startDate     String
  endDate       String
  description   String   @db.LongText
  rules         String   @db.LongText
  criteria      Json?
  views         Int      @default(0)  
  likes         Int      @default(0)  
  shares        Int      @default(0) 
  rewards       ContestReward[]
  submissions   ContestSubmission[] 

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model ContestReward{
  id  String     @id @default(uuid())
  title String
  price String
  metadata Json?
  contestId    String
  contest      Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  
  @@index([contestId])
  @@unique([contestId, id])
}

model ContestSubmission {
  id            String     @id @default(uuid())
  userId        String     
  contestId     String      
  firstName     String  
  lastName      String   
  email         String   
  phone         String   
  videoUrl      String   
  publicId      String 
  resolution    String   
  fileSize      Int      
  duration      Float    
  format        String   
  uploadTime    DateTime  @default(now()) 
  processingStatus String @default("pending") 
  analytics     Json?   
  approvalStatus        Boolean  @default(false)
  views         Int      @default(0)  
  likes         Int      @default(0)  
  shares        Int      @default(0) 

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt 
  
  contest       Contest   @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) 
  @@index([contestId])
}

model ProductReview {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  user      Customer @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([productId])
  @@index([orderId])

}
model Audit {
  id        String   @id @default(uuid())
  orderId   String
  userId    String
  action    String
  changes   Json
  createdAt DateTime @default(now())
}

enum DonationStatus {
  PENDING
  SUCCESS
  FAILED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  PAID
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CARD
  PAYPAL
  BANK_TRANSFER
  CASH_ON_DELIVERY
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSED
}

enum DeliveryStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  RETURNED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum AddressType {
  SHIPPING
  BILLING
  CHECKOUT
}